// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Root {
  uuid String @id @default(uuid())
  firstname String @db.VarChar(255)
  lastname String @db.VarChar(255)
  picture_url String? @db.VarChar(255)
  email String @db.VarChar(255) @unique
  password String @db.VarChar(255)
  valid_email Boolean @default(false)
  email_token String? @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  apps App[]
}

model App {
  uuid String @id @default(uuid())
  name String @db.VarChar(255)
  urls String? @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users User[]
  chats Chat[]
  root Root @relation(fields: [root_uuid], references: [uuid])
  root_uuid String
}

model User {
  uuid String @id @default(uuid())
  name String @db.VarChar(255)
  picture_url String? @db.VarChar(255)
  phone_number String? @db.VarChar(10)
  email String @db.VarChar(255) @unique
  password String @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  app App @relation(fields: [app_uuid], references: [uuid])
  app_uuid String
  role Role? @relation(fields: [role_uuid], references: [uuid])
  role_uuid String?
  userChats UserChat[]
  messages Message[]
}

model Role {
  uuid String @id @default(uuid())
  name String @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users User[]
  permissions Permission[]
}

model Permission {
  uuid String @id @default(uuid())
  name String @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  roles Role[]
}

model Chat {
  uuid String @id @default(uuid())
  type String @db.VarChar(255) // private, group, channel
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  app App @relation(fields: [app_uuid], references: [uuid])
  app_uuid String
  userChats UserChat[]
  messages Message[]
}

model UserChat {
  user User @relation(fields: [userUuid], references: [uuid])
  userUuid String
  chat Chat @relation(fields: [chatUuid], references: [uuid])
  chatUuid String
  type String @db.VarChar(255) // admin, member
  @@id([userUuid, chatUuid])
}

model Message {
  uuid String @id @default(uuid())
  content String @db.Text
  type String @db.VarChar(255) // text, image, video, audio, file
  status String @db.VarChar(255) @default("sent") // sent, delivered, read, deleted
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  chat Chat @relation(fields: [chat_uuid], references: [uuid])
  chat_uuid String
  user User @relation(fields: [user_uuid], references: [uuid])
  user_uuid String
}
